import React, { useState } from 'react';
import GenericModal from '../GenericModal';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon } from 'lucide-react';
import { format } from 'date-fns';
import { fr } from 'date-fns/locale';

export interface Student {
  id: string;
  firstName: string;
  lastName: string;
  matricule: string;
}

export interface Course {
  id: string;
  name: string;
}

export interface GradeData {
  id?: string;
  studentId: string;
  courseId: string;
  evaluation: string;
  value: number;
  max: number;
  date: string;
  comment?: string;
}

interface ModifyGradeModalProps {
  open: boolean;
  onClose: () => void;
  onSubmit: (data: GradeData) => void;
  grade: GradeData;
  course: Course;
  student?: Student;
}

const evaluationTypes = [
  { value: 'TP', label: 'Travaux Pratiques' },
  { value: 'CC', label: 'Contrôle Continu' },
  { value: 'SN', label: 'Session Normale' }
];

const ModifyGradeModal: React.FC<ModifyGradeModalProps> = ({
  open,
  onClose,
  onSubmit,
  grade,
  course,
  student
}) => {
  const [formData, setFormData] = useState<GradeData>({
    ...grade,
    date: grade?.date || new Date().toISOString()
  });
  
  const [date, setDate] = useState<Date>(grade?.date ? new Date(grade.date) : new Date());

  const handleSubmit = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    onSubmit({
      ...formData,
      date: date.toISOString()
    });
    onClose();
  };

  const handleInputChange = (field: keyof GradeData, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (!open) return null;

  return (
    <GenericModal
      open={open}
      onClose={onClose}
      title="Modifier la note"
      confirmText="Enregistrer"
      onConfirm={handleSubmit}
      cancelText="Annuler"
      size="lg"
    >
      <div className="grid gap-4 py-4">
        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="student" className="text-right">
            Étudiant
          </Label>
          <div className="col-span-3">
            <Input
              id="student"
              value={student ? `${student.firstName} ${student.lastName} (${student.matricule})` : ''}
              disabled
              className="bg-gray-100"
            />
          </div>
        </div>

        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="course" className="text-right">
            Cours
          </Label>
          <div className="col-span-3">
            <Input
              id="course"
              value={course?.name || ''}
              disabled
              className="bg-gray-100"
            />
          </div>
        </div>

        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="evaluation" className="text-right">
            Type d'évaluation
          </Label>
          <div className="col-span-3">
            <Select
              value={formData.evaluation}
              onValueChange={(value) => handleInputChange('evaluation', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Sélectionner un type" />
              </SelectTrigger>
              <SelectContent>
                {evaluationTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="grid grid-cols-4 items-center gap-4">
          <Label htmlFor="value" className="text-right">
            Note
          </Label>
          <div className="col-span-3">
            <div className="flex items-center space-x-4">
              <Input
                id="value"
                type="number"
                min="0"
                max={formData.max}
                step="0.01"
                value={formData.value}
                onChange={(e) => handleInputChange('value', parseFloat(e.target.value) || 0)}
                className="w-24"
              />
              <span className="text-muted-foreground">/ {formData.max}</span>
              <div className="flex space-x-2">
                <Button
                  type="button"
                  variant={formData.max === 20 ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleInputChange('max', 20)}
                >
                  20
                </Button>
                <Button
                  type="button"
                  variant={formData.max === 100 ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => handleInputChange('max', 100)}
                >
                  100
                </Button>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-4 items-center gap-4">
          <Label className="text-right">
            Date
          </Label>
          <div className="col-span-3">
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className="w-full justify-start text-left font-normal"
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {date ? format(date, 'PPP', { locale: fr }) : <span>Choisir une date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={(newDate) => newDate && setDate(newDate)}
                  initialFocus
                  locale={fr}
                />
              </PopoverContent>
            </Popover>
          </div>
        </div>

        <div className="grid grid-cols-4 items-start gap-4">
          <Label htmlFor="comment" className="text-right mt-2">
            Commentaire
          </Label>
          <div className="col-span-3">
            <Textarea
              id="comment"
              value={formData.comment || ''}
              onChange={(e) => handleInputChange('comment', e.target.value)}
              placeholder="Ajouter un commentaire (optionnel)"
              rows={3}
            />
          </div>
        </div>
      </div>
    </GenericModal>
  );
};

export default ModifyGradeModal;
